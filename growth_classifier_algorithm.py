# -*- coding: utf-8 -*-

"""
/***************************************************************************
 GrowthClassifier
                                 A QGIS plugin
 This plugin identifies patch growth type
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-08-09
        copyright            : (C) 2020 by Mahmood Abdelkader/Ahmed Elseicy
        email                : m.m.i.abdelkader@gmail.com - ahmed.elcc@gmail.com
 ***************************************************************************/

"""
import traceback
from os import path
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsProcessingMultiStepFeedback,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterVectorLayer,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterDefinition,
                       QgsProcessingParameterFeatureSink)
import processing



__author__ = 'Mahmood Abdelkader/Ahmed Elseicy'
__date__ = '2020-08-09'
__copyright__ = '(C) 2020 by Mahmood Abdelkader/Ahmed Elseicy'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'


class GrowthClassifierAlgorithm(QgsProcessingAlgorithm):
    """
    This is an  algorithm that classifies the growth into 8 classes.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    def initAlgorithm(self, config=None):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        self.addParameter(QgsProcessingParameterFeatureSource(
            'newbu', 'New Patch', types=[QgsProcessing.TypeVectorPolygon], defaultValue=None))
        self.addParameter(QgsProcessingParameterFeatureSource(
            'oldbu', 'Old Patch', types=[QgsProcessing.TypeVectorPolygon], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer(
            'osm', 'Corridors', types=[QgsProcessing.TypeVectorLine], defaultValue=None))
        self.addParameter(QgsProcessingParameterFile('output', 'output folder',
                                                     behavior=QgsProcessingParameterFile.Folder, fileFilter='All files (*.*)', defaultValue=None))
        self.addParameter(QgsProcessingParameterFile('Intermediate', 'intermediate data',
                                                     behavior=QgsProcessingParameterFile.Folder, fileFilter='All files (*.*)', defaultValue=None))
        self.addParameter(QgsProcessingParameterNumber('MinimumClusterArea', 'Minimum Cluster Area',
                                                       type=QgsProcessingParameterNumber.Double, minValue=0, defaultValue=None))
        self.addParameter(QgsProcessingParameterNumber('Width', 'Patch Width',
                                                       type=QgsProcessingParameterNumber.Double, minValue=0, defaultValue=None))
        self.addParameter(QgsProcessingParameterNumber('Height', 'Patch Height',
                                                       type=QgsProcessingParameterNumber.Double, minValue=0, defaultValue=None))


    def processAlgorithm(self, parameters, context, model_feedback):
        """
        Here is where the processing itself takes place.
        """

        # Use a multi-step feedback, so that individual child algorithm progress reports are adjusted for the
        # overall progress through the model
        feedback = QgsProcessingMultiStepFeedback(36, model_feedback)
        results = {}
        outputs = {}
        in_width = parameters['Width']
        in_height = parameters['Height']
        try:
            # 1- Apply buffer to OSM roads
            buffer_params = {
                'DISSOLVE': True,
                'DISTANCE': 100,
                'END_CAP_STYLE': 0,
                'INPUT': parameters['osm'],
                'JOIN_STYLE': 0,
                'MITER_LIMIT': 2,
                'SEGMENTS': 5,
                'OUTPUT': path.join(parameters['Intermediate'], 'roadbuffer.shp')
            }
            outputs['Osmbuffer'] = processing.run(
                'native:buffer', buffer_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['Roadbuffer'] = outputs['Osmbuffer']['OUTPUT']

            feedback.setCurrentStep(1)
            if feedback.isCanceled():
                return {}

            # 2- Calculate Difference between old and new patches
            difference_params = {
                'INPUT': parameters['newbu'],
                'OVERLAY': parameters['oldbu'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['Difference'] = processing.run(
                'native:difference', difference_params, context=context, feedback=feedback, is_child_algorithm=True)

            feedback.setCurrentStep(2)
            if feedback.isCanceled():
                return {}

            # step 2.1 for merging adjacent polygons (fill in the gaps)
            alg_params = {
                'DISSOLVE': False,
                'DISTANCE': -1,
                'END_CAP_STYLE': 1,
                'INPUT': outputs['Difference']['OUTPUT'],
                'JOIN_STYLE': 1,
                'MITER_LIMIT': 2,
                'SEGMENTS': 5,
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['Step1ForMergingAdjacentPolygons'] = processing.run(
                'native:buffer', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

            feedback.setCurrentStep(3)
            if feedback.isCanceled():
                return {}

            # Step 2.2 for merging adjacent polygons
            alg_params = {
                'DISSOLVE': True,
                'DISTANCE': 2,
                'END_CAP_STYLE': 1,
                'INPUT': outputs['Step1ForMergingAdjacentPolygons']['OUTPUT'],
                'JOIN_STYLE': 1,
                'MITER_LIMIT': 2,
                'SEGMENTS': 5,
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['Step2ForMergingAdjacentPolygons'] = processing.run(
                'native:buffer', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

            feedback.setCurrentStep(4)
            if feedback.isCanceled():
                return {}

            # Step 2.3 merging adjacent polygons (split multi parts)
            alg_params = {
                'INPUT': outputs['Step2ForMergingAdjacentPolygons']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['Step3MergingAdjacentPolygons'] = processing.run(
                'native:multiparttosingleparts', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

            feedback.setCurrentStep(5)
            if feedback.isCanceled():
                return {}

            # Step 2.4 merging adjacent polygons
            alg_params = {
                'DISSOLVE': False,
                'DISTANCE': -1,
                'END_CAP_STYLE': 0,
                'INPUT': outputs['Step3MergingAdjacentPolygons']['OUTPUT'],
                'JOIN_STYLE': 0,
                'MITER_LIMIT': 2,
                'SEGMENTS': 5,
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['Step4MergingAdjacentPolygons'] = processing.run(
                'native:buffer', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

            feedback.setCurrentStep(6)
            if feedback.isCanceled():
                return {}

            # 2.5 Add geometry attributes
            alg_params = {
                'CALC_METHOD': 0,
                'INPUT': outputs['Step4MergingAdjacentPolygons']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['AddGeometryAttributes'] = processing.run(
                'qgis:exportaddgeometrycolumns', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

            feedback.setCurrentStep(7)
            if feedback.isCanceled():
                return {}

            # 2.6 Refactor fields
            alg_params = {
                'FIELDS_MAPPING': [{'expression': '\"area\"', 'length': 0, 'name': 'NewPatchArea', 'precision': 0, 'type': 6}],
                'INPUT': outputs['AddGeometryAttributes']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['RefactorFields'] = processing.run(
                'qgis:refactorfields', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

            feedback.setCurrentStep(8)
            if feedback.isCanceled():
                return {}

            # 2.7 Calculate Patch ID
            fieldCalcultor_params = {
                'FIELD_LENGTH': 10,
                'FIELD_NAME': 'ID',
                'FIELD_PRECISION': 3,
                'FIELD_TYPE': 2,
                'FORMULA': ' $id ',
                'INPUT': outputs['RefactorFields']['OUTPUT'],
                'NEW_FIELD': True,
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['CalculatePatchId'] = processing.run(
                'qgis:fieldcalculator', fieldCalcultor_params, context=context, feedback=feedback, is_child_algorithm=True)

            feedback.setCurrentStep(9)
            if feedback.isCanceled():
                return {}

            # 2.8 Buffer by 1 meter
            alg_params = {
                'DISSOLVE': False,
                'DISTANCE': 1,
                'END_CAP_STYLE': 1,
                'INPUT': outputs['CalculatePatchId']['OUTPUT'],
                'JOIN_STYLE': 1,
                'MITER_LIMIT': 2,
                'SEGMENTS': 5,
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['Buffer2'] = processing.run(
                'native:buffer', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

            feedback.setCurrentStep(10)
            if feedback.isCanceled():
                return {}

            # 2.9 Add area of buffered new patch
            alg_params = {
                'CALC_METHOD': 0,
                'INPUT': outputs['Buffer2']['OUTPUT'],
                'OUTPUT': path.join(parameters['Intermediate'], 'NPatchBuf.shp')
            }
            outputs['AddAreaOfBufferedNewPatch'] = processing.run(
                'qgis:exportaddgeometrycolumns', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['Bufferednewpatch'] = outputs['AddAreaOfBufferedNewPatch']['OUTPUT']

            feedback.setCurrentStep(11)
            if feedback.isCanceled():
                return {}

            # 2.10 Organize Fields
            alg_params = {
                'FIELDS_MAPPING': [{'expression': '\"ID\"', 'length': 5, 'name': 'ID', 'precision': 0, 'type': 2}, {'expression': '\"NewPatchAr\"', 'length': 23, 'name': 'NPatch', 'precision': 15, 'type': 2}, {'expression': '\"area\"', 'length': 0, 'name': 'BufNPatch', 'precision': 0, 'type': 2}],
                'INPUT': outputs['AddAreaOfBufferedNewPatch']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['OrganizeFields'] = processing.run(
                'qgis:refactorfields', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

            feedback.setCurrentStep(12)
            if feedback.isCanceled():
                return {}

            # 2.11 Calculate BufferArea Field
            alg_params = {
                'FIELD_LENGTH': 10,
                'FIELD_NAME': 'BufferA',
                'FIELD_PRECISION': 3,
                'FIELD_TYPE': 1,
                'FORMULA': ' \"BufNPatch\"  -  \"NPatch\" ',
                'INPUT': outputs['OrganizeFields']['OUTPUT'],
                'NEW_FIELD': True,
                'OUTPUT': path.join(parameters['Intermediate'], 'NPatchBufA.shp')
            }
            outputs['CalculateBufferareaField'] = processing.run(
                'qgis:fieldcalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['NPatchBufA'] = outputs['CalculateBufferareaField']['OUTPUT']

            feedback.setCurrentStep(13)
            if feedback.isCanceled():
                return {}

            # Intersection
            intersection_params = {
                'INPUT': outputs['CalculateBufferareaField']['OUTPUT'],
                'INPUT_FIELDS': '',
                'OVERLAY': parameters['oldbu'],
                'OVERLAY_FIELDS': 'gridecode',
                'OVERLAY_FIELDS_PREFIX': '',
                'OUTPUT': path.join(parameters['Intermediate'], 'Intersection.shp')
            }
            outputs['Intersection'] = processing.run(
                'native:intersection', intersection_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['Newoldpatchintersection'] = outputs['Intersection']['OUTPUT']

            feedback.setCurrentStep(14)
            if feedback.isCanceled():
                return {}

            # Dissolve
            alg_params = {
                'FIELD': 'ID',
                'INPUT': outputs['Intersection']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['Dissolve'] = processing.run(
                'native:dissolve', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

            feedback.setCurrentStep(15)
            if feedback.isCanceled():
                return {}

            # Add Intersection area
            alg_params = {
                'CALC_METHOD': 0,
                'INPUT': outputs['Dissolve']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['AddIntersectionArea'] = processing.run(
                'qgis:exportaddgeometrycolumns', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

            feedback.setCurrentStep(16)
            if feedback.isCanceled():
                return {}

            # Join attributes by field value
            alg_params = {
                'DISCARD_NONMATCHING': False,
                'FIELD': 'ID',
                'FIELDS_TO_COPY': None,
                'FIELD_2': 'ID',
                'INPUT': outputs['CalculateBufferareaField']['OUTPUT'],
                'INPUT_2': outputs['AddIntersectionArea']['OUTPUT'],
                'METHOD': 1,
                'PREFIX': '',
                'OUTPUT': path.join(parameters['Intermediate'], 'join.shp')
            }
            outputs['JoinAttributesByFieldValue'] = processing.run(
                'native:joinattributestable', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['Joined'] = outputs['JoinAttributesByFieldValue']['OUTPUT']

            feedback.setCurrentStep(17)
            if feedback.isCanceled():
                return {}

            # Organize Joined Layer
            alg_params = {
                'FIELDS_MAPPING': [{'expression': '\"ID\"', 'length': 5, 'name': 'ID', 'precision': 0, 'type': 2}, {'expression': '\"NPatch\"', 'length': 10, 'name': 'NPatch', 'precision': 0, 'type': 4}, {'expression': '\"BufNPatch\"', 'length': 10, 'name': 'BufNPatch', 'precision': 0, 'type': 4}, {'expression': '\"BufferA\"', 'length': 10, 'name': 'BufferA', 'precision': 0, 'type': 4}, {'expression': '\"area\"', 'length': 23, 'name': 'IntersectAr', 'precision': 15, 'type': 2}],
                'INPUT': outputs['JoinAttributesByFieldValue']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['OrganizeJoinedLayer'] = processing.run(
                'qgis:refactorfields', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

            feedback.setCurrentStep(18)
            if feedback.isCanceled():
                return {}

            #  calculate LEI
            alg_params = {
                'FIELD_LENGTH': 10,
                'FIELD_NAME': 'LEI',
                'FIELD_PRECISION': 2,
                'FIELD_TYPE': 0,
                'FORMULA': ' (  \"intersectAr\"  /  \"BufferA\"  )  * 100',
                'INPUT': outputs['OrganizeJoinedLayer']['OUTPUT'],
                'NEW_FIELD': True,
                'OUTPUT': path.join(parameters['output'], 'LEI.shp')
            }
            outputs['CalculateLei'] = processing.run(
                'qgis:fieldcalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['Lei'] = outputs['CalculateLei']['OUTPUT']

            feedback.setCurrentStep(19)
            if feedback.isCanceled():
                return {}

            # Extract Infill Growth
            extract_params = {
                'FIELD': 'LEI',
                'INPUT': outputs['CalculateLei']['OUTPUT'],
                'OPERATOR': 3,
                'VALUE': '50',
                'FAIL_OUTPUT': path.join(parameters['Intermediate'], 'Non.shp'),
                'OUTPUT': path.join(parameters['output'], 'Infill.shp')
            }
            outputs['ExtractInfillGrowth'] = processing.run(
                'native:extractbyattribute', extract_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['InfillGrowth'] = outputs['ExtractInfillGrowth']['OUTPUT']
            results['Noninfill'] = outputs['ExtractInfillGrowth']['FAIL_OUTPUT']

            feedback.setCurrentStep(20)
            if feedback.isCanceled():
                return {}

            # Extract Edge-Expansion
            extract_params = {
                'FIELD': 'LEI',
                'INPUT': outputs['ExtractInfillGrowth']['FAIL_OUTPUT'],
                'OPERATOR': 4,
                'VALUE': '50',
                'FAIL_OUTPUT': path.join(parameters['Intermediate'], 'Out.shp'),
                'OUTPUT': path.join(parameters['Intermediate'], 'Edge.shp'),
            }
            outputs['ExtractEdgeexpansion'] = processing.run(
                'native:extractbyattribute', extract_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['Edge_expansion'] = outputs['ExtractEdgeexpansion']['OUTPUT']
            results['Outlying'] = outputs['ExtractEdgeexpansion']['FAIL_OUTPUT']

            feedback.setCurrentStep(21)
            if feedback.isCanceled():
                return {}

            # Outlying_patches_OSMbuffer_Difference
            alg_params = {
                'INPUT': outputs['ExtractEdgeexpansion']['FAIL_OUTPUT'],
                'INTERSECT': outputs['Osmbuffer']['OUTPUT'],
                'PREDICATE': [6],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['Outlying_patches_osmbuffer_difference'] = processing.run(
                'native:extractbylocation', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

            feedback.setCurrentStep(22)
            if feedback.isCanceled():
                return {}

            # Extract edge-ribbon
            alg_params = {
                'INPUT': outputs['ExtractEdgeexpansion']['OUTPUT'],
                'INTERSECT': outputs['Osmbuffer']['OUTPUT'],
                'PREDICATE': [6],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['ExtractEdgeribbon'] = processing.run(
                'native:extractbylocation', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

            feedback.setCurrentStep(23)
            if feedback.isCanceled():
                return {}

            # MBG_Edge-ribbon
            alg_params = {
                'FIELD': 'ID',
                'INPUT': outputs['ExtractEdgeribbon']['OUTPUT'],
                'TYPE': 1,
                'OUTPUT': path.join(parameters['Intermediate'], 'MBG_ER.shp')
            }
            outputs['Mbg_edgeribbon'] = processing.run(
                'qgis:minimumboundinggeometry', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['Mbg_er'] = outputs['Mbg_edgeribbon']['OUTPUT']

            feedback.setCurrentStep(24)
            if feedback.isCanceled():
                return {}

            # Create_MBG_4_linear_branch
            alg_params = {
                'FIELD': 'ID',
                'INPUT': outputs['Outlying_patches_osmbuffer_difference']['OUTPUT'],
                'TYPE': 1,
                'OUTPUT': path.join(parameters['Intermediate'], 'MBG_LB.shp')
            }
            outputs['Create_mbg_4_linear_branch'] = processing.run(
                'qgis:minimumboundinggeometry', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['Mbg_lb'] = outputs['Create_mbg_4_linear_branch']['OUTPUT']

            feedback.setCurrentStep(25)
            if feedback.isCanceled():
                return {}
            extract_expression = '( \"width\"   >= {0} AND  \"height\"  <= {1} )  OR  (   \"height\"    >= {1} AND   \"width\"   <= {0} ) '.format(
                in_width, in_height)
            # Extract_linear_branch_MBGs_
            alg_params = {
                'EXPRESSION': extract_expression,
                'INPUT': outputs['Create_mbg_4_linear_branch']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['Extract_linear_branch_mbgs_'] = processing.run(
                'native:extractbyexpression', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

            feedback.setCurrentStep(26)
            if feedback.isCanceled():
                return {}

            # Extract by expression
            alg_params = {
                'EXPRESSION': extract_expression,
                'INPUT': outputs['Mbg_edgeribbon']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            outputs['ExtractByExpression'] = processing.run(
                'native:extractbyexpression', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

            feedback.setCurrentStep(27)
            if feedback.isCanceled():
                return {}

            # Extract by location
            alg_params = {
                'INPUT': outputs['ExtractEdgeexpansion']['OUTPUT'],
                'INTERSECT': outputs['ExtractByExpression']['OUTPUT'],
                'PREDICATE': [6],
                'OUTPUT': path.join(parameters['output'], 'Edge_ribbon.shp')
            }
            outputs['ExtractByLocation'] = processing.run(
                'native:extractbylocation', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['EdgeRibbon'] = outputs['ExtractByLocation']['OUTPUT']

            feedback.setCurrentStep(28)
            if feedback.isCanceled():
                return {}

            # Extract Linear Branch
            alg_params = {
                'INPUT': outputs['Outlying_patches_osmbuffer_difference']['OUTPUT'],
                'INTERSECT': outputs['Extract_linear_branch_mbgs_']['OUTPUT'],
                'PREDICATE': [0],
                'OUTPUT': path.join(parameters['output'], 'Linear_branch.shp')
            }
            outputs['ExtractLinearBranch'] = processing.run(
                'native:extractbylocation', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['Linear_branch'] = outputs['ExtractLinearBranch']['OUTPUT']

            feedback.setCurrentStep(29)
            if feedback.isCanceled():
                return {}

            # Extract Expansion
            alg_params = {
                'INPUT': outputs['ExtractEdgeexpansion']['OUTPUT'],
                'OVERLAY': outputs['ExtractByLocation']['OUTPUT'],
                'OUTPUT': path.join(parameters['output'], 'Expansion.shp')
            }
            outputs['ExtractExpansion'] = processing.run(
                'native:difference', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['Expansion'] = outputs['ExtractExpansion']['OUTPUT']

            feedback.setCurrentStep(30)
            if feedback.isCanceled():
                return {}

            # Proximate Scattered & Cluster
            alg_params = {
                'INPUT': outputs['Outlying_patches_osmbuffer_difference']['OUTPUT'],
                'OVERLAY': outputs['ExtractLinearBranch']['OUTPUT'],
                'OUTPUT': path.join(parameters['Intermediate'], 'Proximate_Scatrd_with_Clstr.shp')
            }
            outputs['ProximateScatteredCluster'] = processing.run(
                'native:difference', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['ProximateScatteredCluster'] = outputs['ProximateScatteredCluster']['OUTPUT']

            feedback.setCurrentStep(31)
            if feedback.isCanceled():
                return {}

            # Scattered & Cluster
            alg_params = {
                'INPUT': outputs['ExtractEdgeexpansion']['FAIL_OUTPUT'],
                'OVERLAY': outputs['ExtractLinearBranch']['OUTPUT'],
                'OUTPUT': path.join(parameters['output'], 'Scattered_with_Cluster.shp')
            }
            outputs['ScatteredCluster'] = processing.run(
                'native:difference', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['ScatteredCluster'] = outputs['ScatteredCluster']['OUTPUT']

            feedback.setCurrentStep(32)
            if feedback.isCanceled():
                return {}

            # Extract proximate cluster
            alg_params = {
                'FIELD': 'NPatch',
                'INPUT': outputs['ProximateScatteredCluster']['OUTPUT'],
                'OPERATOR': 3,
                'VALUE': parameters['MinimumClusterArea'],
                'FAIL_OUTPUT': path.join(parameters['output'], 'Proximate_Scattered.shp'),
                'OUTPUT': path.join(parameters['output'], 'Proximate_Cluster.shp')
            }
            outputs['ExtractProximateCluster'] = processing.run(
                'native:extractbyattribute', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['Proximate_cluster'] = outputs['ExtractProximateCluster']['OUTPUT']
            results['Proximate_scattered'] = outputs['ExtractProximateCluster']['FAIL_OUTPUT']

            feedback.setCurrentStep(33)
            if feedback.isCanceled():
                return {}

            # Extract clustered
            alg_params = {
                'FIELD': 'NPatch',
                'INPUT': outputs['ScatteredCluster']['OUTPUT'],
                'OPERATOR': 3,
                'VALUE': parameters['MinimumClusterArea'],
                'FAIL_OUTPUT': path.join(parameters['Intermediate'], 'Scattered.shp'),
                'OUTPUT': path.join(parameters['Intermediate'], 'Cluster.shp'),
            }
            outputs['ExtractClustered'] = processing.run(
                'native:extractbyattribute', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['Cluster'] = outputs['ExtractClustered']['OUTPUT']
            results['Scattered'] = outputs['ExtractClustered']['FAIL_OUTPUT']

            feedback.setCurrentStep(34)
            if feedback.isCanceled():
                return {}

            # Extract Isolated cluster
            alg_params = {
                'INPUT': outputs['ExtractClustered']['OUTPUT'],
                'OVERLAY': outputs['ExtractProximateCluster']['OUTPUT'],
                'OUTPUT': path.join(parameters['output'], 'Isolated_Cluster.shp')
            }
            outputs['ExtractIsolatedCluster'] = processing.run(
                'native:difference', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['Isolated_cluster'] = outputs['ExtractIsolatedCluster']['OUTPUT']

            feedback.setCurrentStep(35)
            if feedback.isCanceled():
                return {}

            # Extract Isolated Scattered
            alg_params = {
                'INPUT': outputs['ExtractClustered']['FAIL_OUTPUT'],
                'OVERLAY': outputs['ExtractProximateCluster']['FAIL_OUTPUT'],
                'OUTPUT': path.join(parameters['output'], 'Isolated_Scattered.shp')
            }
            outputs['ExtractIsolatedScattered'] = processing.run(
                'native:difference', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
            results['Isolated_scattered'] = outputs['ExtractIsolatedScattered']['OUTPUT']
            return {}  # results
        except Exception as e:
            traceback.print_exc()
            return {}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'GrowthClassifier'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return GrowthClassifierAlgorithm()
